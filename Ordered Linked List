package orderedlinklist; // Ordered Linked Lists

class Node {
    int data;
    Node prev;
    Node next;
}

public class OrderedLinkList {
    static Node head,tail;
    
    static void traverse (){
        Node x = head;
        while (x!= null){
            System.out.print(x.data+" - ");
        x=x.next;
        }
        System.out.println("");
    }
    
    static void insert (int new_data){
        Node new_node = new Node();
        new_node.data = new_data;
        if (head == null && tail == null){
            head = new_node;
            tail = new_node;
    }else if (new_node.data <= head.data){
        new_node.next = head;
        head.prev = new_node;
        head = new_node;
    }else if (new_node.data >= tail.data){
        new_node.prev = tail;
        tail.next = new_node;
        tail = new_node;
    } else{ // head < data baru < tail
        Node position = head;
        while (position != null && position.data < new_node.data){
            position = position.next;
        }
        if(position!=null){
            new_node.next = position;
            new_node.prev = position.prev;
            position.prev = new_node;
            new_node.prev.next = new_node;
        }
    }
    }
    
    public static void remove (int deleted){
        if (head==null && tail == null){ //empty
            //Delete imposible, do nothing
        } else if (head==tail && head.data == deleted){ // 1 data
            head=null;
            tail=null;
        }else if (head.data==deleted){ // remove the head
            head = head.next;
            head.prev.next= null;
            head.prev = null;
        }else if (tail.data==deleted){ // remove the tail
            tail=tail.prev;
            tail.prev.next.prev = null;
            tail.next=null;
        } else {
            Node position = head;
            while (position!=null && position.data != deleted){
                position=position.next;
            }
            if (position!=null){
                Node previous = position.prev;
                Node next = position.next;
                position.prev = null;
                position.next = null;
                previous.next = next;
                previous.prev = previous;
            }
        }
    }
    
    public static void main(String[] args) {
        insert (2);
        insert (6);
        insert (9);
        insert (4);
        insert (7);
        insert (8);
        insert (3);
        insert (12);
        insert (5);
        insert (15);
        insert (14);
        insert (10);
        insert (17);
        insert (13);
        insert (11);
        traverse();
    }   
}
